#! /usr/bin/env python
import shlex
import argparse
import sys
import dbus
import textwrap
import readline
import os
import atexit
import subprocess
import time
import xml.dom.minidom
import itertools
import json


histfile = os.path.join(os.path.expanduser("~"), ".nepomuktools/nepomukserver-cli.hist")

try:
    os.mkdir(os.path.join(os.path.expanduser("~"), ".nepomuktools"))
except OSError:
    pass

try:
        readline.read_history_file(histfile)
except IOError:
        pass

atexit.register(readline.write_history_file, histfile)

readline.set_history_length(100)
readline.parse_and_bind("tab: complete")


session_bus = None
session_bus = dbus.SessionBus()

class ServerException(Exception):
    pass

class NoSuchService(Exception):
    def __init__(self,name):
        self.name = name
    pass

class Server(object):
    def __init__(self):
        self.null = open('/dev/null','w')
        self.server = None
        self.server_interface = None         
        self.service_manager = None   
        self.service_manager_interface = None
        

    def try_connect_to_server(self):

        self.server = session_bus.get_object("org.kde.NepomukServer","/nepomukserver")
        self.server_interface = dbus.Interface(self.server,dbus_interface="org.kde.NepomukServer")

        self.service_manager = session_bus.get_object("org.kde.NepomukServer","/servicemanager")
        self.service_manager_interface = dbus.Interface(self.service_manager,dbus_interface = "org.kde.nepomuk.ServiceManager")

    def reset_connection_to_server(self):
        self.server = None
        self.server_interface = None         
        self.service_manager = None   
        self.service_manager_interface = None
        
    def connect_to_server(self):
        if self.server is not None:
            #print "Already connected"
            return True

        success = False
        for i in range(5,-1,-1):
            print "Connecting to server (%s)" % i
            try:
                self.try_connect_to_server()
            except dbus.DBusException,e:
                self.reset_connection_to_server()
                print "DBus error while connecting to server", e
                time.sleep(5 - i)
                pass
            else:
                success = True
                break

        return success

    def is_connected(self):
        return self.service_manager_interface is not None

    def reconfigure(self):
        if self.server is None:
            raise ServerException

        return self.server_interface.reconfigure()

    def start(self):
        if self.server is None:
            if session_bus.name_has_owner("org.kde.NepomukServer"):
                success = self.connect_to_server()
            else:
                subprocess.call("nepomukserver",stdout=self.null,stderr=self.null)
                print "Waiting 10 seconds untill server initialize"
                time.sleep(10)
                success = self.connect_to_server()
            return success
        else:
            return True

    def stop(self):
        if self.server is None:
            raise ServerException

        self.server_interface.quit()
        self.reset_connection_to_server()
        return True

    def runningServices(self):
        if self.service_manager_interface is None:
            raise ServerException

        return self.service_manager_interface.runningServices()

    def availableServices(self):
        if self.service_manager_interface is None:
            raise ServerException
        return self.service_manager_interface.availableServices()

    def startService(self,service_sysname):
        if self.service_manager_interface is None:
            raise ServerException

        return self.service_manager_interface.startService(service_sysname)
    
    def stopService(self,service_sysname):
        if self.service_manager_interface is None:
            raise ServerException

        return self.service_manager_interface.stopService(service_sysname)

    def isServiceRunning(self,service_sysname):
        if self.service_manager_interface is None:
            raise ServerException

        return self.service_manager_interface.isServiceRunning(service_sysname)

    def status(self):
        if self.service_manager_interface is None:
            raise ServerException

        running = self.service_manager.runningServices()
        available = self.service_manager.availableServices()

        if len(available) > 0:
            # Server is running
            return "NepomukServer is running with %s services running\nand %s  more not running" % ( len(running),(len(available) - len(running)))
        else:
            if session_bus.name_has_owner("org.kde.NepomukServer"):
                return "NepomukServer is running but without any service"
            else:
                return "NepomukServer is not running"

    def reconnect(self):
        self.reset_connection_to_server()
        self.connect_to_server()

    def assert_service_exists(self,service_name):
        service_name = get_cannonical_name(service_name)
        if service_name not in self.availableServices():
            raise NoSuchService(service_name)


server = Server()

service_info = {}
service_shortcuts = {}
def register_shortcut(user_name,service_name):
    service_info[user_name] = service_name
    service_shortcuts[service_name] = user_name
    service_shortcuts[user_name] = user_name


register_shortcut('strigi' , 'nepomukstrigiservice')
register_shortcut('query' , "nepomukqueryservice") 
register_shortcut('digikam' , "digikamnepomukservice")
register_shortcut('storage' , "nepomukstorage") 
register_shortcut('removablestorage' , "nepomukremovablestorageservice") 
register_shortcut('backupsync' , "nepomukbackupsync") 
register_shortcut('filewatch' , "nepomukfilewatch" )

def get_cannonical_name(service_name):
     name = service_name.lower()
     try:
         return service_info[name]
     except KeyError:
         return service_name

def service_address(service_name):
    name = get_cannonical_name(service_name)
    return "org.kde.nepomuk.services."+name

def service_object_path(service_name):
    return  "/" + get_cannonical_name(service_name)

def get_shortcut_name(service_name):
    try:
        return service_shortcuts[service_name]
    except KeyError:
        return service_name


class Handler(dict):
    
    paragraphs = [""]

    def handle(self,tokens):
        if len(tokens) > 0 and tokens[0] == "help":
            return self.help("","--")
        else:
            return self.handle_impl(tokens)

    def handle_impl(self,tokens):
        first = tokens.pop(0)
        return self[first].handle(tokens)

    
    def help(self,prefix,delta):
        """ Build help string for handler. Build string consists of descripiton of the command + help string for each subcommand"""
        answer = [ 
            self.description(prefix,delta),
            '\n\n'
            ]
        for key,value in self.iteritems():
            # Form basic string, Then wrap it
            #item_desc = value.description(0,len(prefix+delta)
            #answer.append("%s%s  %s\n"%(prefix,key,value.description()))
            answer.append(prefix)
            answer.append(key+":")
            answer.append( value.help(prefix + delta,delta) )
            answer.append("\n\n")

        return " ".join(filter(lambda x: x is not None, answer))

    def description(self,prefix,delta):
        """ Correctly build description of the command from several paragraphs. 
        This methon is for developers convincience only
        """
                
        # First item in list has initial ident == 0
        subsequent_indent = ' '*(len(prefix)+len(delta))

        result = [ 
                textwrap.fill(
                self.paragraphs[0],
                initial_indent='',
                subsequent_indent=subsequent_indent
                )
                ]
        # Other items have initial ident == subsequent_indent
        result += [ textwrap.fill(p,initial_indent=subsequent_indent,subsequent_indent=subsequent_indent)
                for p in self.paragraphs[1:]
                ]

        return "\n".join(result)

    def complete(self,tokens,state):
        #print "tokens: ",tokens
        if len(tokens) == 0:
            return None
        if len(tokens) == 1:
            token = tokens[0]
            #print "token: ",token
            if token in self.iterkeys():
                return self[token].complete(tokens[1:],state)
            else:
                #for k in self.iterkeys():
                #     print "variant: ",k
                options = [ x for x in self.iterkeys() if x.startswith(token) ]
                #print "Options: ",options
                if state < len(options):
                    return options[state]
                else:
                    return None
        else:
            token = tokens[0]
            if token in self.iterkeys():
                return self[token].complete(tokens[1:],state)
            else:
                return None





class Stopper(Handler):
    def __init__(self):
        super(Stopper,self).__init__()
        self.paragraphs = [ 
        "Stop service. Be aware that stopping some services(e.g. nepomukstorageservice) will end really bad.", 
        "Usage: stop <service1> <service2> ... <serviceN>"
        ]
    def handle_impl(self,tokens):
        if not server.is_connected():
            return 
        result = [self.stop(service) for service in tokens]
        return "".join(result)

    def stop(self,service):
        try :
            server.assert_service_exists(service)
            canonical_name = get_cannonical_name(service)
            is_running = server.isServiceRunning(canonical_name)
            if is_running :
                result =  server.stopService(canonical_name)
                return "Stopping %s %16s\n" % (service, "SUCCESS" if result else "FAIL")
            else:
                return "Service %s not running\n" % service
        except KeyError:
            return  "No such service\n" % service

    def help(self,prefix,delta):
        return self.description(prefix,delta)

    def complete(self,tokens,state):
        try:
            if len(tokens) > 0:
                token = tokens[0]
            else:
                token = ""

            #print "Token: ", token

            options = []
            for service_name in server.runningServices():
                name = get_shortcut_name(service_name)
                if name.startswith(token):
                    options.append(name)
                if service_name.startswith(token):
                    options.append(service_name)

            if state < len(options):
                return options[state]
            else:
                return None
        except:
            print "Dev. bug. Some exception"
            

class Starter(Handler):
    def __init__(self):
        self.paragraphs = [
                "Start service. If service is running, then no actions are taken",
                "Usage: start <service1> <service2> ... <serviceN>"
                ]

    def handle_impl(self,tokens):
        result = [self.start(service) for service in tokens]
        return "".join(result)

    def start(self,service):
        try :
            server.assert_service_exists(service)
            canonical_name = get_cannonical_name(service)
            is_running = server.isServiceRunning(canonical_name)
            if not is_running :
                result = server.startService(canonical_name)
                return "Starting %s %16s\n" % (service, "SUCCESS" if result else "FAIL")
            else:
                return "Service %s is running\n" % service
        except KeyError:
            return "No such service %s\n" % service

    def help(self,prefix,delta):
        return self.description(prefix,delta)

    def complete(self,tokens,state):
        if len(tokens) > 0:
            token = tokens[0]
        else:
            token = ""

        options = []
        running = set(server.runningServices())
        available = set(server.availableServices())
        for service_name in available - running:
            name = get_shortcut_name(service_name)
            if name.startswith(token):
                options.append(name)
            if service_name.startswith(token):
                options.append(service_name)

        if state < len(options):
            return options[state]
        else:
            return None
            

class Restarter(Starter,Stopper):
    def __init__(self):
        super(Restarter,self).__init__()
        paragraphs = [ "Restart service. If service provides restart() method, then this method will be used. Otherwise service will be stoped and then started.",
        "Usage: stop <service1> <service2> ... <serviceN>"
        ]

    def handle_impl(self,tokens):
        result = [ self.restart(service) for service in tokens]
        return "".join(result) 

    def restart(self,service):
        return self.stop(service) + self.start(service)

    def help(self,prefix,delta):
        return self.description(prefix,delta)

    def complete(self,tokens,state):
        return Stopper.complete(self,tokens,state)

class Lister(Handler):
    def __init__(self):
        super(Lister,self).__init__()

        self.paragraphs = [
                "List status of the services. Displays whether service is running or not and some other information",
                "Usage:",
                "list <service1> <service2> ... <serviceN>",
                "list all|available|running",
                "In first invocation, lists statuses of selected services. In second invocation lists statuses of all available services( 'all' or 'available' ) or statuses of running services "
                ]

    def handle_impl(self,tokens):
        if any(map(lambda x:x == "all" or x == 'available',tokens)):
            return self.list_available()

        elif any(map(lambda x:x == "running",tokens)):
            return self.list_running()

        else:
            result = [ self.list_service(service) for service in tokens]
            return "".join(result)


    def list_available(self):
        available = server.availableServices()
        result = [ self.service_status(service) for service in available]
        if len(result):
            return "".join(result)
        else:
            return "No service available"
        

    def list_running(self):
        running = server.runningServices()
        result = [ self.service_status(service) for service in running]
        if len(result):
            return "".join(result)
        else:
            return "No service is running"

    def list_service(self,service):
        server.assert_service_exists(service)
        return self.service_status(service)

    def service_status(self,service_name):
        canonical_name = get_cannonical_name(service_name)
        is_running = server.isServiceRunning(canonical_name)
        output = []
        format_string = "%-8s %s\n"
        if ( is_running ):
            #sa = service_address(canonical_name)
            #sop = service_object_path(canonical_name)
            #service_object = session_bus.get_object(
            #    sa,sop)
            output = ['r',service_name]
        else:
            output = ['n',service_name]

        return format_string % tuple(output)

    def help(self,prefix,delta):
        return self.description(prefix,delta)

    def complete(self,tokens,state):
        if len(tokens) ==  0:
            token = ""
        else:
            token = tokens[0]

        options = ["all","running","available"]
        for service_name in server.availableServices():
            name = get_shortcut_name(service_name)
            options.append(name)
            options.append(service_name)

        options = filter( lambda x: x.startswith(token), options )

        if state < len(options):
            return options[state]
        else:
            return None
            



class ExitHandler(Handler):
    def __init__(self):
        super(ExitHandler,self).__init__()
        self.paragraphs = [ "Exit shell. If used in command line, then do nothing ( And what do you expect ? ) " ]

    def handle_impl(self,tokens):
        sys.exit(0)

class ServerHandler(Handler):
    def __init__(self):
        super(ServerHandler,self).__init__()
        self.paragraphs = [ "Operations with Nepomuk server. Start, stop, reconfigure. ",
                "Usage: server start|stop|reconfigure|restart|status "]
        self.null = open('/dev/null','w')

    def handle_impl(self,tokens):
        command = tokens[0]
        if command == "reconfigure":
            return self.reconfigure()
        elif command == "stop":
            return self.stop()
        elif command == "start":
            return self.start()
        elif command == "restart":
            return "".join([self.stop(),'\n', self.start()])
        elif command == "status":
            return self.status()
        elif command == "reconnect":
            return self.reconnect()
        else:
            return "Unknow command"

    def reconfigure(self):
        if server.reconfigure():
            return "Reconfiguration succeeded"
        else:
            return "Reconfiguration failed"

    def start(self):
        if session_bus.name_has_owner("org.kde.NepomukServer"):
            if not server.is_connected():
                server.connect_to_server()

            if server.is_connected():
                return "NepomukServer is already running"
            else:
                return "NepomukServer already running, but I can't connect to it"
        else:
            success = server.start()

            if success and session_bus.name_has_owner("org.kde.NepomukServer"):
                return "NepomukServer started"
            else:
                return "NepomukServer failed to start. Or delay was too large. Just try to see it's status"

    def stop(self):
        
        success = server.stop()
        if success:
            ## Two string used below instead of one just in case
            return "\n".join( [ "Server stopped", "It may take time( up to 2-3 min) before server really stops. If you run server start again before this minutes, it will connect back to this server, but later connection will fail with DBus No-Reply errors" ] )
        else:
            return "Server stopping failed" 

    def status(self):
        return server.status()

    def reconnect(self):
        return server.reconnect()

    def complete(self,tokens,state):
        if len(tokens) > 1:
            return None

        if len(tokens) == 0:
            token = ""
        else:
            token = tokens[0]

        options = ["start","stop","restart","reconfigure","status","reconnect"]

        options = [ x for x in options if x.startswith(token) ]
        #print "Options: ",options
        if state < len(options):
            return options[state]
        else:
            return None
        if state < len(options):

            return options[state]
        else:
            return None
            

def method_description(method_elem):
    answer = [  method_elem.getAttribute("name") ]
    arguments_dom = method_elem.getElementsByTagName("arg")
    for argument in arguments_dom:
        answer.append("%s:%s" % 
                ( argument.getAttribute("name"), argument.getAttribute("type") )
                    )

    return " ".join(answer)


            

class DynamicCommand(Handler):
    def __init__(self,service_name):
        try:
            self.sysname = get_cannonical_name(service_name)
        except KeyError:
            # This is in case some service do appear, but is not 
            # registered to this utility
            self.sysname = service_name

        self.obj = session_bus.get_object(service_address(self.sysname),service_object_path(self.sysname))
        self.introspection = xml.dom.minidom.parseString(
                str(
                    self.obj.Introspect()
                    )
                )
        self.methods = self.introspection.getElementsByTagName("method")
        self.method_names = []
        for method in self.methods:
            self.method_names.append(method.getAttribute("name"))
        
        self.paragraphs = [ "Dynamic command for service %s" % self.sysname,
                "Usage: ",
                "%s - list all available methods" % self.sysname,
                "%s <method_name> <arg1> <arg2> ... <argN> - call selected method with given arguments\nAttention: arguments are parset with JSON. So string 'abc' must be in form '\"abc\"' (Note 2 pair of quotes)" % self.sysname
                ]

    def handle_impl(self,tokens):
        result = []
        try:
            if len(tokens) == 0:
                ## Just list all available methods
                for method in self.methods:
                    result.append(method_description(method))

                return "\n".join(result)
            else:
                methname = tokens.pop(0)
                try:
                    call = getattr(self.obj,methname)
                except (AttributeError,ValueError):
                    return "No such method %s" % methname

                ## Now load all aguments with json module
                arguments = []
                try:
                    for token in tokens:
                        arguments.append( json.loads(token) )
                except ValueError,e:
                    return "Cant parse argument %s with JSON. Error was %s" % ( len(arguments), e)

                return str(call(*arguments))

        except dbus.DBusException,e:
            return "No such method or incorrect type/number of arguments. DBus eror is %s" % (e,)

    def complete(self,tokens,state):
        #print "complete. tokens: ", tokens
        ## We can complete only methods names
        if len(tokens) > 1:
            return None
        elif len(tokens) == 0:
            token = ""
        else:
            token = tokens[0]

        answer = filter( lambda x: x.startswith(token), self.method_names )

        if state < len(answer):
            return answer[state]
        else:
            return None
        
    


class MainHandler(Handler):
    def __init__(self):
        super(MainHandler,self).__init__()

    def __contains__(self,key):
        if server.is_connected():
            return key in server.runningServices()
        else:
            return False

    def __getitem__(self,key):
        if  super(MainHandler,self).__contains__(key):
            return super(MainHandler,self).__getitem__(key)
        elif server.is_connected():
            running = server.runningServices()
            # Get FQN
            full_name = get_cannonical_name(key)

            if full_name in running:
                return DynamicCommand(key) 
            else:
                raise KeyError
        else:
            raise KeyError 

    def iterkeys(self):
        if server.is_connected():
            running = server.runningServices()
            return itertools.chain(
                    iter(running),
                    filter( 
                        lambda x: x is not None,
                        map( lambda x : get_shortcut_name(x), running   )
                        ),
                    super(MainHandler,self).iterkeys()
                    )
        else:
            return super(MainHandler,self).iterkeys()

service_handler = Handler()
service_handler["restart"] = Restarter()
service_handler["stop"] = Stopper()
service_handler["start"] = Starter()
service_handler["list"] = Lister()
service_handler.paragraphs = [ """ This command provids commands for common operation with Nepomuk services.
(start, stop etc). It can not be used to execute service-specific command. For such purposes use dynamic
comands, <service name> <opname> <arg1> <arg2> ... <arg2>""" ]

exit_handler = ExitHandler()

main_handler = MainHandler()
main_handler.paragraphs = [ 
"This small utility is intended to control Nepomuk Server from command line. \
It can work as a shell( repeatedly reading commands from STDIN and executing them) or \
read commands from argv",
"Examples:",
"Restart strigi: nepomukserver-cli service restart strigi",
"See running services: nepomukserver-cli list running"
"There are dynamic commands. This is commands that appear only if service is running. To call dynamic command use service name ( any, system or user ). If this service is running, then it will execute given method. If it is not running, then shell will report unknow command. To see running services use 'service list running'. See usage below"
"Dynamic commands usage:"
"<service_name> - list availabe methods and their signature. Any of service names can be used, e.g. strigi or nepomukstrigiservice"
"<service_name> <method_name> <arg1> <arg2> ... <argN> - call given method with given arguments. No checks are performed and all errors will be reported as DBus errors"
]

main_handler["service"] = service_handler
main_handler["server"] = ServerHandler()
main_handler["exit"] = exit_handler
main_handler["quit"] = exit_handler


def complete_tokens(text,state):
    tokens = shlex.split(readline.get_line_buffer() )
    return main_handler.complete(tokens,state)

def execute_tokens(tokens):
    try:
        result = main_handler.handle(tokens)
        print result
    except IndexError:
        print "Not enough arguments"
    except KeyError,e:
        print "Unknow command", e
    except dbus.DBusException,e:
        print "Error in DBus. May be NepomukServer/some service is not running or not responding",e
    except ServerException:
        print "Not connected to server. Try execute 'server start'"
    except NoSuchService,e:
        print "No such service %s" % e.name


def start_shell():
    while 1:
        try:
            string = raw_input('server> ')
        except EOFError:
            sys.exit(0)

        tokens = shlex.split(string)
        if len(tokens) > 0 :
            execute_tokens(tokens)


# Set completer
readline.set_completer(complete_tokens)

parser = argparse.ArgumentParser(description="""
CLI for Nepomuk Server.
Used for launching,restarting and finishing services
"""
)
parser.add_argument('tokens', metavar='TOKEN', type=str,nargs='*')

args = parser.parse_args()


if not server.connect_to_server():
    print "Can not connect to NepomukServer. Either NepomukServer or DBus are broken" 

if len(sys.argv) > 1:
    execute_tokens(sys.argv[1:])
else:
    # Start interactive shell
    start_shell()


# vim:ts=4:expandtab:sw=4
