#! /usr/bin/env python
import shlex
import argparse
import sys
import dbus
import textwrap
import readline
import os
import atexit

histfile = os.path.join(os.path.expanduser("~"), ".nepomuktools/nepomukserver-cli.hist")

try:
    os.mkdir(os.path.join(os.path.expanduser("~"), ".nepomuktools"))
except OSError:
    pass

try:
        readline.read_history_file(histfile)
except IOError:
        pass

atexit.register(readline.write_history_file, histfile)

readline.set_history_length(100)


service_info = {}
def register_info(user_name,service_name):
    service_info[user_name] = service_name
    service_info[service_name] = service_name


register_info('strigi' , 'nepomukstrigiservice')
register_info('query' , "nepomukqueryservice") 
register_info('digikam' , "digikamnepomukservice")
register_info('storage' , "nepomukstorage") 
register_info('removablestorage' , "nepomukremovablestorageservice") 
register_info('backupsync' , "nepomukbackupsync") 
register_info('filewatch' , "nepomukfilewatch" )

def name_conversation(service_name):
     name = service_name.lower()
     return service_info[name]

def service_address(service_name):
    name = name_conversation(service_name)
    return "org.kde.nepomuk.services."+name

def service_object_path(service_name):
    return  name_conversation(service_name)


class Handler(dict):
    
    paragraphs = [""]

    def handle(self,tokens):
        if len(tokens) > 0 and tokens[0] == "help":
            return self.help("","--")
        else:
            return self.handle_impl(tokens)

    def handle_impl(self,tokens):
        first = tokens.pop(0)
        return self[first].handle(tokens)

    
    def help(self,prefix,delta):
        """ Build help string for handler. Build string consists of descripiton of the command + help string for each subcommand"""
        answer = [ 
            self.description(prefix,delta),
            '\n\n'
            ]
        for key,value in self.iteritems():
            # Form basic string, Then wrap it
            #item_desc = value.description(0,len(prefix+delta)
            #answer.append("%s%s  %s\n"%(prefix,key,value.description()))
            answer.append(prefix)
            answer.append(key+":")
            answer.append( value.help(prefix + delta,delta) )
            answer.append("\n\n")

        return " ".join(filter(lambda x: x is not None, answer))

    def description(self,prefix,delta):
        """ Correctly build description of the command from several paragraphs. 
        This methon is for developers convincience only
        """
                
        # First item in list has initial ident == 0
        subsequent_indent = ' '*(len(prefix)+len(delta))

        result = [ 
                textwrap.fill(
                self.paragraphs[0],
                initial_indent='',
                subsequent_indent=subsequent_indent
                )
                ]
        # Other items have initial ident == subsequent_indent
        result += [ textwrap.fill(p,initial_indent=subsequent_indent,subsequent_indent=subsequent_indent)
                for p in self.paragraphs[1:]
                ]

        return "\n".join(result)





class Stopper(Handler):
    def __init__(self):
        super(Stopper,self).__init__()
        self.paragraphs = [ 
        "Stop service. Be aware that stopping some services(e.g. nepomukstorageservice) will end really bad.", 
        "Usage: stop <service1> <service2> ... <serviceN>"
        ]
    def handle_impl(self,tokens):
        result = [self.stop(service) for service in tokens]
        return "".join(result)

    def stop(self,service):
        try :
            canonical_name = name_conversation(service)
            is_running = service_manager.isServiceRunning(canonical_name)
            if is_running :
                result =  service_manager.stopService(canonical_name)
                return "Stopping %s %16s\n" % (service, "SUCCESS" if result else "FAIL")
            else:
                return "Service %s not running\n" % service
        except KeyError:
            return  "No such service\n" % service

    def help(self,prefix,delta):
        return self.description(prefix,delta)


class Starter(Handler):
    def __init__(self):
        self.paragraphs = [
                "Start service. If service is running, then no actions are taken",
                "Usage: start <service1> <service2> ... <serviceN>"
                ]

    def handle_impl(self,tokens):
        result = [self.start(service) for service in tokens]
        return "".join(result)

    def start(self,service):
        try :
            canonical_name = name_conversation(service)
            is_running = service_manager.isServiceRunning(canonical_name)
            if not is_running :
                result = service_manager.startService(canonical_name)
                return "Starting %s %16s\n" % (service, "SUCCESS" if result else "FAIL")
            else:
                return "Service %s is running\n" % service
        except KeyError:
            return "No such service %s\n" % service

    def help(self,prefix,delta):
        return self.description(prefix,delta)


class Restarter(Starter,Stopper):
    def __init__(self):
        super(Restarter,self).__init__()
        paragraphs = [ "Restart service. If service provides restart() method, then this method will be used. Otherwise service will be stoped and then started.",
        "Usage: stop <service1> <service2> ... <serviceN>"
        ]

    def handle_impl(self,tokens):
        result = [ self.restart(service) for service in tokens]
        return "".join(result) 

    def restart(self,service):
        return self.stop(service) + self.start(service)

    def help(self,prefix,delta):
        return self.description(prefix,delta)


class Lister(Handler):
    def __init__(self):
        super(Lister,self).__init__()

        self.paragraphs = [
                "List status of the services. Displays whether service is running or not and some other information",
                "Usage:",
                "list <service1> <service2> ... <serviceN>",
                "list all|available|running",
                "In first invocation, lists statuses of selected services. In second invocation lists statuses of all available services( 'all' or 'available' ) or statuses of running services "
                ]

    def handle_impl(self,tokens):
        if any(map(lambda x:x == "all" or x == 'available',tokens)):
            return self.list_available()

        elif any(map(lambda x:x == "running",tokens)):
            return self.list_running()

        else:
            result = [ self.list_service(service) for service in tokens]
            return "".join(result)


    def list_available(self):
        available = service_manager.availableServices()
        result = [ self.list_service(service) for service in available]
        if len(result):
            return "".join(result)
        else:
            return "No service available"
        

    def list_running(self):
        running = service_manager.availableServices()
        result = [ self.list_service(service) for service in running]
        if len(result):
            return "".join(result)
        else:
            return "No service is running"

    def list_service(self,service):
        try :
            canonical_name = name_conversation(service)
            is_running = service_manager.isServiceRunning(canonical_name)
            output = []
            format_string = "%-8s %s\n"
            if ( is_running ):
                #sa = service_address(canonical_name)
                #sop = service_object_path(canonical_name)
                #service_object = session_bus.get_object(
                #    sa,sop)
                output = ['r',service]
            else:
                output = ['n',service]

            return format_string % tuple(output)
        except KeyError:
            return "No such service %s\n" %( service,)

    def help(self,prefix,delta):
        return self.description(prefix,delta)

class ExitHandler(Handler):
    def __init__(self):
        super(ExitHandler,self).__init__()
        self.paragraphs = [ "Exit shell. If used in command line, then do nothing ( And what do you expect ? ) " ]

    def handle_impl(self,tokens):
        sys.exit(0)

service_handler = Handler()
service_handler["restart"] = Restarter()
service_handler["stop"] = Stopper()
service_handler["start"] = Starter()
service_handler["list"] = Lister()
service_handler.paragraphs = [ """ This command provids commands for common operation with Nepomuk services.
(start, stop etc). It can not be used to execute service-specific command. For such purposes use dynamic
comands, <service name> <opname> <arg1> <arg2> ... <arg2>""" ]

exit_handler = ExitHandler()

main_handler = Handler()
main_handler.paragraphs = [ 
"This small utility is intended to control Nepomuk Server from command line. \
It can work as a shell( repeatedly reading commands from STDIN and executing them) or \
read commands from argv",
"Examples:",
"Restart strigi: nepomukserver-cli service restart strigi",
"See running services: nepomukserver-cli list running"
]

main_handler["service"] = service_handler
main_handler["exit"] = exit_handler
main_handler["quit"] = exit_handler


def execute_tokens(tokens):
    try:
        result = main_handler.handle(tokens)
        print result
    except IndexError:
        print "Not enough arguments"
    except KeyError,e:
        print "Unknow command", e


def start_shell():
    while 1:
        try:
            string = raw_input('server> ')
        except EOFError:
            sys.exit(0)

        tokens = shlex.split(string)
        execute_tokens(tokens)


parser = argparse.ArgumentParser(description="""
CLI for Nepomuk Server.
Used for launching,restarting and finishing services
"""
)
parser.add_argument('tokens', metavar='TOKEN', type=str,nargs='*')

args = parser.parse_args()

try: 
    session_bus = dbus.SessionBus()

    server = session_bus.get_object("org.kde.NepomukServer","/nepomukserver")
    server_interface = dbus.Interface(server,dbus_interface="ork.kde.NepomukServer")

    service_manager = session_bus.get_object("org.kde.NepomukServer","/servicemanager")
    service_manager_interface = dbus.Interface(service_manager,dbus_interface = "org.kde.Nepomuk.ServiceManager")

except dbus.DBusException:
    print "Can not connect to NepomukServer. Either NepomukServer or DBus are broken" 
    sys.exit(1)

if len(sys.argv) > 1:
    execute_tokens(sys.argv[1:])
else:
    # Start interactive shell
    start_shell()


# vim:ts=4:expandtab:sw=4
